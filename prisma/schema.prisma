datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String     @unique
  emailVerified DateTime?
  image         String?
  phone         String?
  role          Role?
  accounts      Account[]
  sessions      Session[]
  testUsers     TestUser[]

  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  TestAnalytics TestAnalytics[]
  QuestionTime  QuestionTime[]
}

enum Role {
  STUDENT
  TEACHER
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Enums

enum Subject {
  MATH
  PHYSICS
  CHEMISTRY
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

// Question
model Question {
  id            String          @id @default(cuid())
  subject       Subject
  difficulty    Difficulty
  index         Int
  text          String
  options       Option[]
  answer        Answer?         @relation("QuestionAnswer")
  lastActiveIn  TestAnalytics[] @relation("LastActiveQuestion")
  attemptedBy   TestAnalytics[] @relation("AttemptedQuestions")
  skippedBy     TestAnalytics[] @relation("SkippedQuestions")
  markedBy      TestAnalytics[] @relation("MarkedQuestions")
  timeSpent     QuestionTime[]
  testQuestions TestQuestion[]

  @@unique([index, subject, difficulty])
}

model Option {
  id         String     @id @default(cuid())
  letter     String
  text       String
  subject    Subject
  difficulty Difficulty
  question   Question?  @relation(fields: [questionId], references: [id])
  questionId String?
}

model Answer {
  id            String     @id @default(cuid())
  index         Int
  correctOption String
  solutionData  String
  subject       Subject
  difficulty    Difficulty
  question      Question   @relation("QuestionAnswer", fields: [index, subject, difficulty], references: [index, subject, difficulty])

  @@unique([index, subject, difficulty])
}

model Test {
  id            String          @id @default(cuid())
  startTime     DateTime
  endTime       DateTime
  date          DateTime
  testQuestions TestQuestion[]
  users         TestUser[]
  analytics     TestAnalytics[]
  questionTimes QuestionTime[]
}

model TestQuestion {
  testId     String
  questionId String
  position   Int

  test     Test     @relation(fields: [testId], references: [id])
  question Question @relation(fields: [questionId], references: [id])

  @@id([testId, questionId])
}

model TestUser {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String
  test   Test   @relation(fields: [testId], references: [id])
  testId String
}

model TestAnalytics {
  id                   String     @id @default(cuid())
  test                 Test       @relation(fields: [testId], references: [id])
  testId               String
  user                 User       @relation(fields: [userId], references: [id])
  userId               String
  lastActiveQuestionId String?
  lastActiveQuestion   Question?  @relation("LastActiveQuestion", fields: [lastActiveQuestionId], references: [id])
  timeSpent            Float
  tabSwitches          Int
  attemptedQuestions   Question[] @relation("AttemptedQuestions")
  skippedQuestions     Question[] @relation("SkippedQuestions")
  markedQuestions      Question[] @relation("MarkedQuestions")
}

model QuestionTime {
  id         String   @id @default(cuid())
  test       Test     @relation(fields: [testId], references: [id])
  testId     String
  question   Question @relation(fields: [questionId], references: [id])
  questionId String
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  timeSpent  Float
  userOption String?

  @@unique([testId, questionId, userId])
}
